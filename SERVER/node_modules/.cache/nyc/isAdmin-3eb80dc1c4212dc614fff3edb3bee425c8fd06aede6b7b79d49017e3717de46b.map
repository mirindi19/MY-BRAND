{"version":3,"names":["jwt","require","users","isAdmin","req","res","next","Token","headers","status","send","decoded","verify","process","env","JWT_SECRET","user","email","found","findOne","json","message","role","err","module","exports"],"sourceRoot":"E:\\andela\\New Andela\\node_mongo_tutorial\\src\\middlewares\\","sources":["isAdmin.js"],"sourcesContent":["const jwt =require(\"jsonwebtoken\");\r\nconst users =require(\"../models/users\");\r\n\r\nconst isAdmin = async (req, res, next) => {\r\n\r\n  // const Token = req.cookies.jwt\r\n//   if(token){\r\n//       jwt.verify(token,'mirinditokensecrete',async(err,decodedtoken)=>{\r\n//           if(err){\r\n//               res.status(400).json({\"message\":err})\r\n//   // next()\r\n//           }\r\n//           if(decodedtoken){\r\n//               const data= await users.findById(decodedtoken.id)\r\n//               res.status(200).json({\r\n//                 data:token\r\n//               })\r\n//               // if(data){\r\n//               //    if(data.email==\"admin@gmail.com\"){\r\n//               //     next()\r\n//               //    }\r\n//               //    else{\r\n//               //     res.status(400).json({\"message\":\"Only Admin can perform this action\"})\r\n//               //    }\r\n//               // }else{\r\n//               //     res.status(400).json({\"message\":\"user not found\"})\r\n//               // }\r\n//           }\r\n//       })\r\n//   }else{\r\n//       res.status(401).json({\"message\":\"Log In first !!\"})\r\n// }\r\n\r\n  const Token = req.headers[\"token\"];\r\n  if (!Token) {\r\n    return res.status(403).send(\"A token is required for authentication\");\r\n  }\r\n  try {\r\n    const decoded = await jwt.verify(Token, process.env.JWT_SECRET);\r\n    req.user = decoded;\r\n   const email = req.user.email;\r\n    const found = await users.findOne({email} );\r\n    if (!found) {\r\n      return res.status(404).json({\r\n        status: 404,\r\n        message: \"User not found\",\r\n      });\r\n    }\r\n    if (found.role == \"Admin\") {\r\n      return next();\r\n    } else {\r\n      return res.status(403).json({\r\n        status: 403,\r\n        message: \"Only Admin allowed\",\r\n      });\r\n    }\r\n  } catch (err) {\r\n    return res.status(409).send(\"Invalid Token\");\r\n  }\r\n};\r\nmodule.exports=isAdmin;\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAEC,OAAO,CAAC,cAAc,CAAC;AAClC,MAAMC,KAAK,GAAED,OAAO,CAAC,iBAAiB,CAAC;AAEvC,MAAME,OAAO,GAAG,OAAOC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAExC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAO,CAAC,OAAO,CAAC;EAClC,IAAI,CAACD,KAAK,EAAE;IACV,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,wCAAwC,CAAC;EACvE;EACA,IAAI;IACF,MAAMC,OAAO,GAAG,MAAMX,GAAG,CAACY,MAAM,CAACL,KAAK,EAAEM,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IAC/DX,GAAG,CAACY,IAAI,GAAGL,OAAO;IACnB,MAAMM,KAAK,GAAGb,GAAG,CAACY,IAAI,CAACC,KAAK;IAC3B,MAAMC,KAAK,GAAG,MAAMhB,KAAK,CAACiB,OAAO,CAAC;MAACF;IAAK,CAAC,CAAE;IAC3C,IAAI,CAACC,KAAK,EAAE;MACV,OAAOb,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACW,IAAI,CAAC;QAC1BX,MAAM,EAAE,GAAG;QACXY,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;IACA,IAAIH,KAAK,CAACI,IAAI,IAAI,OAAO,EAAE;MACzB,OAAOhB,IAAI,EAAE;IACf,CAAC,MAAM;MACL,OAAOD,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACW,IAAI,CAAC;QAC1BX,MAAM,EAAE,GAAG;QACXY,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,OAAOlB,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;EAC9C;AACF,CAAC;AACDc,MAAM,CAACC,OAAO,GAACtB,OAAO"}