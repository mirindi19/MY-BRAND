{"version":3,"names":["jwt","require","dotenv","config","verifyToken","req","res","next","token","headers","status","send","decoded","verify","process","env","JWT_SECRET","user","err","module","exports"],"sourceRoot":"E:\\andela\\New Andela\\node_mongo_tutorial\\src\\middlewares\\","sources":["verifyToken.js"],"sourcesContent":["const jwt=require(\"jsonwebtoken\");\r\nconst dotenv=require(\"dotenv\");\r\ndotenv.config();\r\n\r\nconst verifyToken=async(req, res, next)=>{\r\nconst token=req.headers['token']\r\n//const token=authHeader && authHeader.split('')[1]\r\nif (!token) {\r\n    return res.status(403).send(\"A token is required for authentication\");\r\n  }\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    req.user = decoded;\r\n    // console.log(req.user)\r\n  } catch (err) {\r\n    return res.status(401).send(\"Invalid Token\");\r\n  }\r\n  return next();\r\n\r\n}\r\nmodule.exports=verifyToken;\r\n\r\n\r\n\r\n// const jwt=require(\"jsonwebtoken\");\r\n// const dotenv=require(\"dotenv\");\r\n// dotenv.config();\r\n\r\n// const verifyToken=async(req, res, next)=>{\r\n// // const token=req.headers['token']\r\n// //const token=authHeader && authHeader.split('')[1]\r\n// const token = req.cookies.jwt\r\n// if(token){\r\n//     jwt.verify(token,'mirinditokensecrete',(err,decodedtoken)=>{\r\n//         if(err){\r\n//             res.status(401).json({\"Error\":\"Please Login First !!!\"})\r\n//         }\r\n//         if(decodedtoken){\r\n//              next()\r\n//         }\r\n//     })\r\n// }else{\r\n//     res.status(401).json({\"Message\":\"Please Login First !!!\"})\r\n//  }\r\n// // if (!token) {\r\n// //     return res.status(404).send(\"A token is required for authentication\");\r\n// //   }\r\n// //   try {\r\n// //     const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n// //     req.user = decoded;\r\n// //     // console.log(req.user)\r\n// //   } catch (err) {\r\n// //     return res.status(401).send(\"Invalid Token\");\r\n// //   }\r\n// //   return next();\r\n\r\n// }\r\n// module.exports=verifyToken;\r\n\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAACC,OAAO,CAAC,cAAc,CAAC;AACjC,MAAMC,MAAM,GAACD,OAAO,CAAC,QAAQ,CAAC;AAC9BC,MAAM,CAACC,MAAM,EAAE;AAEf,MAAMC,WAAW,GAAC,OAAMC,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAG;EACzC,MAAMC,KAAK,GAACH,GAAG,CAACI,OAAO,CAAC,OAAO,CAAC;EAChC;EACA,IAAI,CAACD,KAAK,EAAE;IACR,OAAOF,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,wCAAwC,CAAC;EACvE;EACA,IAAI;IACF,MAAMC,OAAO,GAAGZ,GAAG,CAACa,MAAM,CAACL,KAAK,EAAEM,OAAO,CAACC,GAAG,CAACC,UAAU,CAAC;IACzDX,GAAG,CAACY,IAAI,GAAGL,OAAO;IAClB;EACF,CAAC,CAAC,OAAOM,GAAG,EAAE;IACZ,OAAOZ,GAAG,CAACI,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;EAC9C;EACA,OAAOJ,IAAI,EAAE;AAEf,CAAC;AACDY,MAAM,CAACC,OAAO,GAAChB,WAAW;;AAI1B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"}