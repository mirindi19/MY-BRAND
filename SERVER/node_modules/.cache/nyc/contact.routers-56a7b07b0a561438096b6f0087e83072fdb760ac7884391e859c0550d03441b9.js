function cov_9ks57nb3u(){var path="E:\\andela\\New Andela\\MY BRAND\\SERVER\\src\\routers\\contact.routers.js";var hash="499982e785457bbaf41c36bc1b60fde1e7d35e50";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\andela\\New Andela\\MY BRAND\\SERVER\\src\\routers\\contact.routers.js",statementMap:{"0":{start:{line:108,column:15},end:{line:108,column:42}},"1":{start:{line:109,column:20},end:{line:109,column:57}},"2":{start:{line:110,column:16},end:{line:110,column:49}},"3":{start:{line:111,column:26},end:{line:111,column:69}},"4":{start:{line:112,column:0},end:{line:112,column:48}},"5":{start:{line:113,column:0},end:{line:113,column:72}},"6":{start:{line:114,column:0},end:{line:114,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{},b:{},inputSourceMap:{version:3,names:["router","require","Router","verifyToken","isAdmin","contactController","post","SendMessage","get","DisplayContact","module","exports"],sourceRoot:"E:\\andela\\New Andela\\MY BRAND\\SERVER\\src\\routers\\",sources:["contact.routers.js"],sourcesContent:["/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     Book:\r\n *       type: object\r\n *       required:\r\n *         - title\r\n *         - author\r\n *         - finished\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *           description: The auto-generated id of the book\r\n *         title:\r\n *           type: string\r\n *           description: The title of your book\r\n *         author:\r\n *           type: string\r\n *           description: The book author\r\n *         finished:\r\n *           type: boolean\r\n *           description: Whether you have finished reading the book\r\n *         createdAt:\r\n *           type: string\r\n *           format: date\r\n *           description: The date the book was added\r\n *       example:\r\n *         id: d5fE_asz\r\n *         title: The New Turing Omnibus\r\n *         author: Alexander K. Dewdney\r\n *         finished: false\r\n *         createdAt: 2020-03-10T04:05:06.157Z\r\n */\r\n/**\r\n * @swagger\r\n * /contat:\r\n *   get:\r\n *     summary: Get all Contact \r\n *     tags: [Contacts]\r\n *     parameters:\r\n *       - name: token\r\n *         in: header\r\n *         description: THis is the token to login\r\n *         type: string\r\n *         required: true\r\n *     responses:\r\n *       200:\r\n *         description: Contact Have been Fetched.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties: \r\n *                 status:\r\n *                  type: integer\r\n *                 message:\r\n *                  type: string\r\n *                 data:\r\n *                  type: object\r\n *       500:\r\n *         description: Some server error\r\n *   post:\r\n *     summary: Send Message \r\n *     tags: [Contacts]\r\n *     requestBody:\r\n *       required: true\r\n *       content: \r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - name\r\n *               - email\r\n *               - address\r\n *               - message\r\n *             properties:\r\n *               name:\r\n *                 type: string\r\n *               email:\r\n *                 type: string\r\n *               address:\r\n *                 type: string\r\n *               message:\r\n *                 type: string\r\n *           example:\r\n *               name: \"mirindi saidi\"\r\n *               email: \"mirindisaidi19@gmail.com\"\r\n *               address: \"rubavu\"\r\n *               message: \"Do you know java?\"\r\n *     responses:\r\n *       201:\r\n *         description: Message Send Successfully.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties: \r\n *                 status:\r\n *                  type: integer\r\n *                 message:\r\n *                  type: string\r\n *                 data:\r\n *                  type: object\r\n *       500:\r\n *         description: Some server error\r\n */\r\nconst router=require(\"express\").Router();\r\nconst verifyToken =require(\"../middlewares/verifyToken\");\r\nconst isAdmin=require(\"../middlewares/isAdmin\");\r\nconst contactController =require(\"../controllers/ContactController\");\r\nrouter.post(\"/\",contactController.SendMessage);\r\nrouter.get(\"/\",verifyToken,isAdmin,contactController.DisplayContact);\r\nmodule.exports=router;"],mappingsxC,MAAMC,WAAW,GAAEF,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAMG,OAAO,GAACH,OAAO,CAAC,wBAAwB,CAAC;AAC/C,MAAMI,iBAAiB,GAAEJ,OAAO,CAAC,kCAAkC,CAAC;AACpED,MAAM,CAACM,IAAI,CAAC,GAAG,EAACD,iBAAiB,CAACE,WAAW,CAAC;AAC9CP,MAAM,CAACQ,GAAG,CAAC,GAAG,EAACL,WAAW,EAACC,OAAO,EAACC,iBAAiB,CAACI,cAAc,CAAC;AACpEC,MAAM,CAACC,OAAO,GAACX,MAAM"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"499982e785457bbaf41c36bc1b60fde1e7d35e50"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_9ks57nb3u=function(){return actualCoverage;};}return actualCoverage;}cov_9ks57nb3u();/**
 * @swagger
 * components:
 *   schemas:
 *     Book:
 *       type: object
 *       required:
 *         - title
 *         - author
 *         - finished
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the book
 *         title:
 *           type: string
 *           description: The title of your book
 *         author:
 *           type: string
 *           description: The book author
 *         finished:
 *           type: boolean
 *           description: Whether you have finished reading the book
 *         createdAt:
 *           type: string
 *           format: date
 *           description: The date the book was added
 *       example:
 *         id: d5fE_asz
 *         title: The New Turing Omnibus
 *         author: Alexander K. Dewdney
 *         finished: false
 *         createdAt: 2020-03-10T04:05:06.157Z
 */ /**
 * @swagger
 * /contat:
 *   get:
 *     summary: Get all Contact 
 *     tags: [Contacts]
 *     parameters:
 *       - name: token
 *         in: header
 *         description: THis is the token to login
 *         type: string
 *         required: true
 *     responses:
 *       200:
 *         description: Contact Have been Fetched.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties: 
 *                 status:
 *                  type: integer
 *                 message:
 *                  type: string
 *                 data:
 *                  type: object
 *       500:
 *         description: Some server error
 *   post:
 *     summary: Send Message 
 *     tags: [Contacts]
 *     requestBody:
 *       required: true
 *       content: 
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - email
 *               - address
 *               - message
 *             properties:
 *               name:
 *                 type: string
 *               email:
 *                 type: string
 *               address:
 *                 type: string
 *               message:
 *                 type: string
 *           example:
 *               name: "mirindi saidi"
 *               email: "mirindisaidi19@gmail.com"
 *               address: "rubavu"
 *               message: "Do you know java?"
 *     responses:
 *       201:
 *         description: Message Send Successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties: 
 *                 status:
 *                  type: integer
 *                 message:
 *                  type: string
 *                 data:
 *                  type: object
 *       500:
 *         description: Some server error
 */const router=(cov_9ks57nb3u().s[0]++,require("express").Router());const verifyToken=(cov_9ks57nb3u().s[1]++,require("../middlewares/verifyToken"));const isAdmin=(cov_9ks57nb3u().s[2]++,require("../middlewares/isAdmin"));const contactController=(cov_9ks57nb3u().s[3]++,require("../controllers/ContactController"));cov_9ks57nb3u().s[4]++;router.post("/",contactController.SendMessage);cov_9ks57nb3u().s[5]++;router.get("/",verifyToken,isAdmin,contactController.DisplayContact);cov_9ks57nb3u().s[6]++;module.exports=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyb3V0ZXIiLCJyZXF1aXJlIiwiUm91dGVyIiwidmVyaWZ5VG9rZW4iLCJpc0FkbWluIiwiY29udGFjdENvbnRyb2xsZXIiLCJwb3N0IiwiU2VuZE1lc3NhZ2UiLCJnZXQiLCJEaXNwbGF5Q29udGFjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IkU6XFxhbmRlbGFcXE5ldyBBbmRlbGFcXE1ZIEJSQU5EXFxTRVJWRVJcXHNyY1xccm91dGVyc1xcIiwic291cmNlcyI6WyJjb250YWN0LnJvdXRlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBzd2FnZ2VyXHJcbiAqIGNvbXBvbmVudHM6XHJcbiAqICAgc2NoZW1hczpcclxuICogICAgIEJvb2s6XHJcbiAqICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICByZXF1aXJlZDpcclxuICogICAgICAgICAtIHRpdGxlXHJcbiAqICAgICAgICAgLSBhdXRob3JcclxuICogICAgICAgICAtIGZpbmlzaGVkXHJcbiAqICAgICAgIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgaWQ6XHJcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgYXV0by1nZW5lcmF0ZWQgaWQgb2YgdGhlIGJvb2tcclxuICogICAgICAgICB0aXRsZTpcclxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSB0aXRsZSBvZiB5b3VyIGJvb2tcclxuICogICAgICAgICBhdXRob3I6XHJcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgYm9vayBhdXRob3JcclxuICogICAgICAgICBmaW5pc2hlZDpcclxuICogICAgICAgICAgIHR5cGU6IGJvb2xlYW5cclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBXaGV0aGVyIHlvdSBoYXZlIGZpbmlzaGVkIHJlYWRpbmcgdGhlIGJvb2tcclxuICogICAgICAgICBjcmVhdGVkQXQ6XHJcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgIGZvcm1hdDogZGF0ZVxyXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBkYXRlIHRoZSBib29rIHdhcyBhZGRlZFxyXG4gKiAgICAgICBleGFtcGxlOlxyXG4gKiAgICAgICAgIGlkOiBkNWZFX2FzelxyXG4gKiAgICAgICAgIHRpdGxlOiBUaGUgTmV3IFR1cmluZyBPbW5pYnVzXHJcbiAqICAgICAgICAgYXV0aG9yOiBBbGV4YW5kZXIgSy4gRGV3ZG5leVxyXG4gKiAgICAgICAgIGZpbmlzaGVkOiBmYWxzZVxyXG4gKiAgICAgICAgIGNyZWF0ZWRBdDogMjAyMC0wMy0xMFQwNDowNTowNi4xNTdaXHJcbiAqL1xyXG4vKipcclxuICogQHN3YWdnZXJcclxuICogL2NvbnRhdDpcclxuICogICBnZXQ6XHJcbiAqICAgICBzdW1tYXJ5OiBHZXQgYWxsIENvbnRhY3QgXHJcbiAqICAgICB0YWdzOiBbQ29udGFjdHNdXHJcbiAqICAgICBwYXJhbWV0ZXJzOlxyXG4gKiAgICAgICAtIG5hbWU6IHRva2VuXHJcbiAqICAgICAgICAgaW46IGhlYWRlclxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBUSGlzIGlzIHRoZSB0b2tlbiB0byBsb2dpblxyXG4gKiAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgIHJlcXVpcmVkOiB0cnVlXHJcbiAqICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgIDIwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogQ29udGFjdCBIYXZlIGJlZW4gRmV0Y2hlZC5cclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFxyXG4gKiAgICAgICAgICAgICAgICAgc3RhdHVzOlxyXG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXJcclxuICogICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICBkYXRhOlxyXG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICA1MDA6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFNvbWUgc2VydmVyIGVycm9yXHJcbiAqICAgcG9zdDpcclxuICogICAgIHN1bW1hcnk6IFNlbmQgTWVzc2FnZSBcclxuICogICAgIHRhZ3M6IFtDb250YWN0c11cclxuICogICAgIHJlcXVlc3RCb2R5OlxyXG4gKiAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gKiAgICAgICBjb250ZW50OiBcclxuICogICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgcmVxdWlyZWQ6XHJcbiAqICAgICAgICAgICAgICAgLSBuYW1lXHJcbiAqICAgICAgICAgICAgICAgLSBlbWFpbFxyXG4gKiAgICAgICAgICAgICAgIC0gYWRkcmVzc1xyXG4gKiAgICAgICAgICAgICAgIC0gbWVzc2FnZVxyXG4gKiAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgIG5hbWU6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICBlbWFpbDpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgIGFkZHJlc3M6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICBtZXNzYWdlOlxyXG4gKiAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICBleGFtcGxlOlxyXG4gKiAgICAgICAgICAgICAgIG5hbWU6IFwibWlyaW5kaSBzYWlkaVwiXHJcbiAqICAgICAgICAgICAgICAgZW1haWw6IFwibWlyaW5kaXNhaWRpMTlAZ21haWwuY29tXCJcclxuICogICAgICAgICAgICAgICBhZGRyZXNzOiBcInJ1YmF2dVwiXHJcbiAqICAgICAgICAgICAgICAgbWVzc2FnZTogXCJEbyB5b3Uga25vdyBqYXZhP1wiXHJcbiAqICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgIDIwMTpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogTWVzc2FnZSBTZW5kIFN1Y2Nlc3NmdWxseS5cclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFxyXG4gKiAgICAgICAgICAgICAgICAgc3RhdHVzOlxyXG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXJcclxuICogICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICBkYXRhOlxyXG4gKiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICA1MDA6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFNvbWUgc2VydmVyIGVycm9yXHJcbiAqL1xyXG5jb25zdCByb3V0ZXI9cmVxdWlyZShcImV4cHJlc3NcIikuUm91dGVyKCk7XHJcbmNvbnN0IHZlcmlmeVRva2VuID1yZXF1aXJlKFwiLi4vbWlkZGxld2FyZXMvdmVyaWZ5VG9rZW5cIik7XHJcbmNvbnN0IGlzQWRtaW49cmVxdWlyZShcIi4uL21pZGRsZXdhcmVzL2lzQWRtaW5cIik7XHJcbmNvbnN0IGNvbnRhY3RDb250cm9sbGVyID1yZXF1aXJlKFwiLi4vY29udHJvbGxlcnMvQ29udGFjdENvbnRyb2xsZXJcIik7XHJcbnJvdXRlci5wb3N0KFwiL1wiLGNvbnRhY3RDb250cm9sbGVyLlNlbmRNZXNzYWdlKTtcclxucm91dGVyLmdldChcIi9cIix2ZXJpZnlUb2tlbixpc0FkbWluLGNvbnRhY3RDb250cm9sbGVyLkRpc3BsYXlDb250YWN0KTtcclxubW9kdWxlLmV4cG9ydHM9cm91dGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLE1BQU0sR0FBQ0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDQyxNQUFNLEVBQUU7QUFDeEMsTUFBTUMsV0FBVyxHQUFFRixPQUFPLENBQUMsNEJBQTRCLENBQUM7QUFDeEQsTUFBTUcsT0FBTyxHQUFDSCxPQUFPLENBQUMsd0JBQXdCLENBQUM7QUFDL0MsTUFBTUksaUJBQWlCLEdBQUVKLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQztBQUNwRUQsTUFBTSxDQUFDTSxJQUFJLENBQUMsR0FBRyxFQUFDRCxpQkFBaUIsQ0FBQ0UsV0FBVyxDQUFDO0FBQzlDUCxNQUFNLENBQUNRLEdBQUcsQ0FBQyxHQUFHLEVBQUNMLFdBQVcsRUFBQ0MsT0FBTyxFQUFDQyxpQkFBaUIsQ0FBQ0ksY0FBYyxDQUFDO0FBQ3BFQyxNQUFNLENBQUNDLE9BQU8sR0FBQ1gsTUFBTSJ9
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Im12TEFlQTtBQUFBLHlGQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBakNBLENBa0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsS0FBTUEsT0FBTSx5QkFBQ0MsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDQyxNQUFNLEVBQUUsRUFDeEMsS0FBTUMsWUFBVyx5QkFBRUYsT0FBTyxDQUFDLDRCQUE0QixDQUFDLEVBQ3hELEtBQU1HLFFBQU8seUJBQUNILE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxFQUMvQyxLQUFNSSxrQkFBaUIseUJBQUVKLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyx5QkFDcEVELE1BQU0sQ0FBQ00sSUFBSSxDQUFDLEdBQUcsQ0FBQ0QsaUJBQWlCLENBQUNFLFdBQVcsQ0FBQyx3QkFDOUNQLE1BQU0sQ0FBQ1EsR0FBRyxDQUFDLEdBQUcsQ0FBQ0wsV0FBVyxDQUFDQyxPQUFPLENBQUNDLGlCQUFpQixDQUFDSSxjQUFjLENBQUMsd0JBQ3BFQyxNQUFNLENBQUNDLE9BQU8sQ0FBQ1gsTUFBTSIsIm5hbWVzIjpbInJvdXRlciIsInJlcXVpcmUiLCJSb3V0ZXIiLCJ2ZXJpZnlUb2tlbiIsImlzQWRtaW4iLCJjb250YWN0Q29udHJvbGxlciIsInBvc3QiLCJTZW5kTWVzc2FnZSIsImdldCIsIkRpc3BsYXlDb250YWN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiRTpcXGFuZGVsYVxcTmV3IEFuZGVsYVxcTVkgQlJBTkRcXFNFUlZFUlxcc3JjXFxyb3V0ZXJzXFwiLCJzb3VyY2VzIjpbImNvbnRhY3Qucm91dGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQHN3YWdnZXJcclxuICogY29tcG9uZW50czpcclxuICogICBzY2hlbWFzOlxyXG4gKiAgICAgQm9vazpcclxuICogICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgIHJlcXVpcmVkOlxyXG4gKiAgICAgICAgIC0gdGl0bGVcclxuICogICAgICAgICAtIGF1dGhvclxyXG4gKiAgICAgICAgIC0gZmluaXNoZWRcclxuICogICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICBpZDpcclxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBhdXRvLWdlbmVyYXRlZCBpZCBvZiB0aGUgYm9va1xyXG4gKiAgICAgICAgIHRpdGxlOlxyXG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIHRpdGxlIG9mIHlvdXIgYm9va1xyXG4gKiAgICAgICAgIGF1dGhvcjpcclxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBib29rIGF1dGhvclxyXG4gKiAgICAgICAgIGZpbmlzaGVkOlxyXG4gKiAgICAgICAgICAgdHlwZTogYm9vbGVhblxyXG4gKiAgICAgICAgICAgZGVzY3JpcHRpb246IFdoZXRoZXIgeW91IGhhdmUgZmluaXNoZWQgcmVhZGluZyB0aGUgYm9va1xyXG4gKiAgICAgICAgIGNyZWF0ZWRBdDpcclxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgZm9ybWF0OiBkYXRlXHJcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGRhdGUgdGhlIGJvb2sgd2FzIGFkZGVkXHJcbiAqICAgICAgIGV4YW1wbGU6XHJcbiAqICAgICAgICAgaWQ6IGQ1ZkVfYXN6XHJcbiAqICAgICAgICAgdGl0bGU6IFRoZSBOZXcgVHVyaW5nIE9tbmlidXNcclxuICogICAgICAgICBhdXRob3I6IEFsZXhhbmRlciBLLiBEZXdkbmV5XHJcbiAqICAgICAgICAgZmluaXNoZWQ6IGZhbHNlXHJcbiAqICAgICAgICAgY3JlYXRlZEF0OiAyMDIwLTAzLTEwVDA0OjA1OjA2LjE1N1pcclxuICovXHJcbi8qKlxyXG4gKiBAc3dhZ2dlclxyXG4gKiAvY29udGF0OlxyXG4gKiAgIGdldDpcclxuICogICAgIHN1bW1hcnk6IEdldCBhbGwgQ29udGFjdCBcclxuICogICAgIHRhZ3M6IFtDb250YWN0c11cclxuICogICAgIHBhcmFtZXRlcnM6XHJcbiAqICAgICAgIC0gbmFtZTogdG9rZW5cclxuICogICAgICAgICBpbjogaGVhZGVyXHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFRIaXMgaXMgdGhlIHRva2VuIHRvIGxvZ2luXHJcbiAqICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICogICAgIHJlc3BvbnNlczpcclxuICogICAgICAgMjAwOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBDb250YWN0IEhhdmUgYmVlbiBGZXRjaGVkLlxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgcHJvcGVydGllczogXHJcbiAqICAgICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlclxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgIGRhdGE6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgIDUwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogU29tZSBzZXJ2ZXIgZXJyb3JcclxuICogICBwb3N0OlxyXG4gKiAgICAgc3VtbWFyeTogU2VuZCBNZXNzYWdlIFxyXG4gKiAgICAgdGFnczogW0NvbnRhY3RzXVxyXG4gKiAgICAgcmVxdWVzdEJvZHk6XHJcbiAqICAgICAgIHJlcXVpcmVkOiB0cnVlXHJcbiAqICAgICAgIGNvbnRlbnQ6IFxyXG4gKiAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICAgICAgICByZXF1aXJlZDpcclxuICogICAgICAgICAgICAgICAtIG5hbWVcclxuICogICAgICAgICAgICAgICAtIGVtYWlsXHJcbiAqICAgICAgICAgICAgICAgLSBhZGRyZXNzXHJcbiAqICAgICAgICAgICAgICAgLSBtZXNzYWdlXHJcbiAqICAgICAgICAgICAgIHByb3BlcnRpZXM6XHJcbiAqICAgICAgICAgICAgICAgbmFtZTpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgIGVtYWlsOlxyXG4gKiAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgYWRkcmVzczpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgIGV4YW1wbGU6XHJcbiAqICAgICAgICAgICAgICAgbmFtZTogXCJtaXJpbmRpIHNhaWRpXCJcclxuICogICAgICAgICAgICAgICBlbWFpbDogXCJtaXJpbmRpc2FpZGkxOUBnbWFpbC5jb21cIlxyXG4gKiAgICAgICAgICAgICAgIGFkZHJlc3M6IFwicnViYXZ1XCJcclxuICogICAgICAgICAgICAgICBtZXNzYWdlOiBcIkRvIHlvdSBrbm93IGphdmE/XCJcclxuICogICAgIHJlc3BvbnNlczpcclxuICogICAgICAgMjAxOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBNZXNzYWdlIFNlbmQgU3VjY2Vzc2Z1bGx5LlxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgcHJvcGVydGllczogXHJcbiAqICAgICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlclxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgIGRhdGE6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgIDUwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogU29tZSBzZXJ2ZXIgZXJyb3JcclxuICovXHJcbmNvbnN0IHJvdXRlcj1yZXF1aXJlKFwiZXhwcmVzc1wiKS5Sb3V0ZXIoKTtcclxuY29uc3QgdmVyaWZ5VG9rZW4gPXJlcXVpcmUoXCIuLi9taWRkbGV3YXJlcy92ZXJpZnlUb2tlblwiKTtcclxuY29uc3QgaXNBZG1pbj1yZXF1aXJlKFwiLi4vbWlkZGxld2FyZXMvaXNBZG1pblwiKTtcclxuY29uc3QgY29udGFjdENvbnRyb2xsZXIgPXJlcXVpcmUoXCIuLi9jb250cm9sbGVycy9Db250YWN0Q29udHJvbGxlclwiKTtcclxucm91dGVyLnBvc3QoXCIvXCIsY29udGFjdENvbnRyb2xsZXIuU2VuZE1lc3NhZ2UpO1xyXG5yb3V0ZXIuZ2V0KFwiL1wiLHZlcmlmeVRva2VuLGlzQWRtaW4sY29udGFjdENvbnRyb2xsZXIuRGlzcGxheUNvbnRhY3QpO1xyXG5tb2R1bGUuZXhwb3J0cz1yb3V0ZXI7Il19