function cov_26fa6d82gd(){var path="E:\\andela\\New Andela\\node_mongo_tutorial\\src\\routers\\blog.routers.js";var hash="326054b0d40123ff9b42f94ddad9d8fc1dc73ab3";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\andela\\New Andela\\node_mongo_tutorial\\src\\routers\\blog.routers.js",statementMap:{"0":{start:{line:138,column:15},end:{line:138,column:42}},"1":{start:{line:139,column:23},end:{line:139,column:63}},"2":{start:{line:140,column:20},end:{line:140,column:57}},"3":{start:{line:141,column:16},end:{line:141,column:49}},"4":{start:{line:142,column:23},end:{line:142,column:63}},"5":{start:{line:143,column:15},end:{line:143,column:41}},"6":{start:{line:144,column:0},end:{line:144,column:87}},"7":{start:{line:145,column:0},end:{line:145,column:70}},"8":{start:{line:146,column:0},end:{line:146,column:41}},"9":{start:{line:147,column:0},end:{line:147,column:92}},"10":{start:{line:148,column:0},end:{line:148,column:66}},"11":{start:{line:149,column:0},end:{line:149,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},f:{},b:{},inputSourceMap:{version:3,names:["router","require","Router","BlogController","verifyToken","isAdmin","BlogValidation","upload","post","single","AddBlog","delete","deletBlog","get","findData","put","updateBlog","FindById","module","exports"],sourceRoot:"E:\\andela\\New Andela\\node_mongo_tutorial\\src\\routers\\",sources:["blog.routers.js"],sourcesContent:["/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     Book:\r\n *       type: object\r\n *       required:\r\n *         - title\r\n *         - author\r\n *         - finished\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *           description: The auto-generated id of the book\r\n *         title:\r\n *           type: string\r\n *           description: The title of your book\r\n *         author:\r\n *           type: string\r\n *           description: The book author\r\n *         finished:\r\n *           type: boolean\r\n *           description: Whether you have finished reading the book\r\n *         createdAt:\r\n *           type: string\r\n *           format: date\r\n *           description: The date the book was added\r\n *       example:\r\n *         id: d5fE_asz\r\n *         title: The New Turing Omnibus\r\n *         author: Alexander K. Dewdney\r\n *         finished: false\r\n *         createdAt: 2020-03-10T04:05:06.157Z\r\n */\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Blogs\r\n *   description: This is the blogs APiI\r\n * /blog:\r\n *   get:\r\n *     summary: Get all Blogs \r\n *     tags: [Blogs]\r\n *     responses:\r\n *       200:\r\n *         description: Blogs Have been Fetched.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties: \r\n *                 status:\r\n *                   type: integer\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *       500:\r\n *         description: Some server error\r\n *   post:\r\n *     summary: Add BLogsr \r\n *     tags: [Blogs]\r\n *     parameters:\r\n *       - name: token\r\n *         in: header\r\n *         description: THis is the token to login\r\n *         type: string\r\n *         required: true\r\n *     requestBody:\r\n *       required: true\r\n *       content: \r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - title\r\n *               - content\r\n *               - image\r\n *             properties:\r\n *               title:\r\n *                 type: string\r\n *               content:\r\n *                 type: string\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *     responses:\r\n *       200:\r\n *         description: Blog Created Successfully.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties: \r\n *                 status:\r\n *                  type: integer\r\n *                 message:\r\n *                  type: string\r\n *                 data:\r\n *                  type: object\r\n *       500:\r\n *         description: Some server error\r\n * /blog/{id}:\r\n *   delete:\r\n *     summary: delete blog\r\n *     parameters :\r\n *       - name: token\r\n *         in: header\r\n *         description: token to log in\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description : object id of blog\r\n *     tags: [Blogs]\r\n *     responses:\r\n *       200:\r\n *         description: Blog deleted\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type:  object\r\n *             properties:\r\n *               status:\r\n *                 type: integer\r\n *               message:\r\n *                 type: string\r\n *               data:\r\n *                 type: object\r\n *       404:\r\n *         description: Blog Not Found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type:  object\r\n */\r\nconst router=require(\"express\").Router();\r\nconst BlogController=require(\"../controllers/BlogController\");\r\nconst verifyToken =require(\"../middlewares/verifyToken\");\r\nconst isAdmin=require(\"../middlewares/isAdmin\");\r\nconst BlogValidation=require(\"../middlewares/BlogValidation\");\r\nconst upload=require(\"../utils/multer\")\r\nrouter.post(\"/\",verifyToken,isAdmin,upload.single(\"image\"),BlogController.AddBlog);\r\nrouter.delete(\"/:id\",verifyToken,isAdmin,BlogController.deletBlog);\r\nrouter.get(\"/\",BlogController.findData);\r\nrouter.put(\"/:id\",verifyToken,isAdmin,upload.single(\"image\"),BlogController.updateBlog);\r\nrouter.get(\"/:id\",verifyToken,isAdmin,BlogController.FindById);\r\nmodule.exports =router;"],mappingsxC,MAAMC,cAAc,GAACF,OAAO,CAAC,+BAA+B,CAAC;AAC7D,MAAMG,WAAW,GAAEH,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAMI,OAAO,GAACJ,OAAO,CAAC,wBAAwB,CAAC;AAC/C,MAAMK,cAAc,GAACL,OAAO,CAAC,+BAA+B,CAAC;AAC7D,MAAMM,MAAM,GAACN,OAAO,CAAC,iBAAiB,CAAC;AACvCD,MAAM,CAACQ,IAAI,CAAC,GAAG,EAACJ,WAAW,EAACC,OAAO,EAACE,MAAM,CAACE,MAAM,CAAC,OAAO,CAAC,EAACN,cAAc,CAACO,OAAO,CAAC;AAClFV,MAAM,CAACW,MAAM,CAAC,MAAM,EAACP,WAAW,EAACC,OAAO,EAACF,cAAc,CAACS,SAAS,CAAC;AAClEZ,MAAM,CAACa,GAAG,CAAC,GAAG,EAACV,cAAc,CAACW,QAAQ,CAAC;AACvCd,MAAM,CAACe,GAAG,CAAC,MAAM,EAACX,WAAW,EAACC,OAAO,EAACE,MAAM,CAACE,MAAM,CAAC,OAAO,CAAC,EAACN,cAAc,CAACa,UAAU,CAAC;AACvFhB,MAAM,CAACa,GAAG,CAAC,MAAM,EAACT,WAAW,EAACC,OAAO,EAACF,cAAc,CAACc,QAAQ,CAAC;AAC9DC,MAAM,CAACC,OAAO,GAAEnB,MAAM"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"326054b0d40123ff9b42f94ddad9d8fc1dc73ab3"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_26fa6d82gd=function(){return actualCoverage;};}return actualCoverage;}cov_26fa6d82gd();/**
 * @swagger
 * components:
 *   schemas:
 *     Book:
 *       type: object
 *       required:
 *         - title
 *         - author
 *         - finished
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the book
 *         title:
 *           type: string
 *           description: The title of your book
 *         author:
 *           type: string
 *           description: The book author
 *         finished:
 *           type: boolean
 *           description: Whether you have finished reading the book
 *         createdAt:
 *           type: string
 *           format: date
 *           description: The date the book was added
 *       example:
 *         id: d5fE_asz
 *         title: The New Turing Omnibus
 *         author: Alexander K. Dewdney
 *         finished: false
 *         createdAt: 2020-03-10T04:05:06.157Z
 */ /**
 * @swagger
 * tags:
 *   name: Blogs
 *   description: This is the blogs APiI
 * /blog:
 *   get:
 *     summary: Get all Blogs 
 *     tags: [Blogs]
 *     responses:
 *       200:
 *         description: Blogs Have been Fetched.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties: 
 *                 status:
 *                   type: integer
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *       500:
 *         description: Some server error
 *   post:
 *     summary: Add BLogsr 
 *     tags: [Blogs]
 *     parameters:
 *       - name: token
 *         in: header
 *         description: THis is the token to login
 *         type: string
 *         required: true
 *     requestBody:
 *       required: true
 *       content: 
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *               - content
 *               - image
 *             properties:
 *               title:
 *                 type: string
 *               content:
 *                 type: string
 *               image:
 *                 type: string
 *                 format: binary
 *     responses:
 *       200:
 *         description: Blog Created Successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties: 
 *                 status:
 *                  type: integer
 *                 message:
 *                  type: string
 *                 data:
 *                  type: object
 *       500:
 *         description: Some server error
 * /blog/{id}:
 *   delete:
 *     summary: delete blog
 *     parameters :
 *       - name: token
 *         in: header
 *         description: token to log in
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description : object id of blog
 *     tags: [Blogs]
 *     responses:
 *       200:
 *         description: Blog deleted
 *         content:
 *           application/json:
 *             schema:
 *               type:  object
 *             properties:
 *               status:
 *                 type: integer
 *               message:
 *                 type: string
 *               data:
 *                 type: object
 *       404:
 *         description: Blog Not Found
 *         content:
 *           application/json:
 *             schema:
 *               type:  object
 */const router=(cov_26fa6d82gd().s[0]++,require("express").Router());const BlogController=(cov_26fa6d82gd().s[1]++,require("../controllers/BlogController"));const verifyToken=(cov_26fa6d82gd().s[2]++,require("../middlewares/verifyToken"));const isAdmin=(cov_26fa6d82gd().s[3]++,require("../middlewares/isAdmin"));const BlogValidation=(cov_26fa6d82gd().s[4]++,require("../middlewares/BlogValidation"));const upload=(cov_26fa6d82gd().s[5]++,require("../utils/multer"));cov_26fa6d82gd().s[6]++;router.post("/",verifyToken,isAdmin,upload.single("image"),BlogController.AddBlog);cov_26fa6d82gd().s[7]++;router.delete("/:id",verifyToken,isAdmin,BlogController.deletBlog);cov_26fa6d82gd().s[8]++;router.get("/",BlogController.findData);cov_26fa6d82gd().s[9]++;router.put("/:id",verifyToken,isAdmin,upload.single("image"),BlogController.updateBlog);cov_26fa6d82gd().s[10]++;router.get("/:id",verifyToken,isAdmin,BlogController.FindById);cov_26fa6d82gd().s[11]++;module.exports=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,