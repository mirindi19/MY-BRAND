function cov_2p7gdqvzu5(){var path="E:\\andela\\New Andela\\MY BRAND\\SERVER\\src\\routers\\blog.routers.js";var hash="446144f2025865bc1c0c1cf2c4a1078a4ee20f08";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"E:\\andela\\New Andela\\MY BRAND\\SERVER\\src\\routers\\blog.routers.js",statementMap:{"0":{start:{line:211,column:15},end:{line:211,column:42}},"1":{start:{line:212,column:23},end:{line:212,column:63}},"2":{start:{line:213,column:20},end:{line:213,column:57}},"3":{start:{line:214,column:16},end:{line:214,column:49}},"4":{start:{line:215,column:15},end:{line:215,column:41}},"5":{start:{line:216,column:0},end:{line:216,column:87}},"6":{start:{line:217,column:0},end:{line:217,column:70}},"7":{start:{line:218,column:0},end:{line:218,column:41}},"8":{start:{line:219,column:0},end:{line:219,column:92}},"9":{start:{line:220,column:0},end:{line:220,column:66}},"10":{start:{line:221,column:0},end:{line:221,column:24}}},fnMap:{},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0},f:{},b:{},inputSourceMap:{version:3,names:["router","require","Router","BlogController","verifyToken","isAdmin","upload","post","single","AddBlog","delete","deletBlog","get","findData","put","updateBlog","FindById","module","exports"],sourceRoot:"E:\\andela\\New Andela\\MY BRAND\\SERVER\\src\\routers\\",sources:["blog.routers.js"],sourcesContent:["/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     Book:\r\n *       type: object\r\n *       required:\r\n *         - title\r\n *         - author\r\n *         - finished\r\n *       properties:\r\n *         id:\r\n *           type: string\r\n *           description: The auto-generated id of the book\r\n *         title:\r\n *           type: string\r\n *           description: The title of your book\r\n *         author:\r\n *           type: string\r\n *           description: The book author\r\n *         finished:\r\n *           type: boolean\r\n *           description: Whether you have finished reading the book\r\n *         createdAt:\r\n *           type: string\r\n *           format: date\r\n *           description: The date the book was added\r\n *       example:\r\n *         id: d5fE_asz\r\n *         title: The New Turing Omnibus\r\n *         author: Alexander K. Dewdney\r\n *         finished: false\r\n *         createdAt: 2020-03-10T04:05:06.157Z\r\n */\r\n/**\r\n * @swagger\r\n * tags:\r\n *   name: Blogs\r\n *   description: This is the blogs APiI\r\n * /blog:\r\n *   get:\r\n *     summary: Get all Blogs \r\n *     tags: [Blogs]\r\n *     responses:\r\n *       200:\r\n *         description: Blogs Have been Fetched.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties: \r\n *                 status:\r\n *                   type: integer\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *       500:\r\n *         description: Some server error\r\n *   post:\r\n *     summary: Add BLogsr \r\n *     tags: [Blogs]\r\n *     parameters:\r\n *       - name: token\r\n *         in: header\r\n *         description: THis is the token to login\r\n *         type: string\r\n *         required: true\r\n *     requestBody:\r\n *       required: true\r\n *       content: \r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             required:\r\n *               - title\r\n *               - content\r\n *               - image\r\n *             properties:\r\n *               title:\r\n *                 type: string\r\n *               content:\r\n *                 type: string\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *     responses:\r\n *       200:\r\n *         description: Blog Created Successfully.\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties: \r\n *                 status:\r\n *                  type: integer\r\n *                 message:\r\n *                  type: string\r\n *                 data:\r\n *                  type: object\r\n *       500:\r\n *         description: Some server error\r\n * /blog/{id}:\r\n *   delete:\r\n *     summary: delete blog\r\n *     parameters :\r\n *       - name: token\r\n *         in: header\r\n *         description: token to log in\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description : object id of blog\r\n *     tags: [Blogs]\r\n *     responses:\r\n *       200:\r\n *         description: Blog deleted\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type:  object\r\n *             properties:\r\n *               status:\r\n *                 type: integer\r\n *               message:\r\n *                 type: string\r\n *               data:\r\n *                 type: object\r\n *       404:\r\n *         description: Blog Not Found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type:  object\r\n *   put:\r\n *     summary: Update a blog \r\n *     tags: [Blogs]\r\n *     parameters :\r\n *       - name: token\r\n *         in: header\r\n *         description: token to log in\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description : id of blog\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         multipart/form-data:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               title:\r\n *                 type: string\r\n *               image:\r\n *                 type: string\r\n *                 format: binary\r\n *               content:\r\n *                 type: string\r\n *     responses:\r\n *       201:\r\n *         description: Blog Created \r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: integer\r\n *                 message:\r\n *                   type: string\r\n *                 data:\r\n *                   type: object\r\n *       406:\r\n *         description: A field is Empty\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *   get:\r\n *     summary: single blog\r\n *     parameters :\r\n *       - name: token\r\n *         in: header\r\n *         description: token to log in\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description : id of blog\r\n *     tags: [Blogs]\r\n *     responses:\r\n *       200:\r\n *         description: Single Blog Retrieved\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *       404:\r\n *         description: Single Blog Not Found\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n */\r\nconst router=require(\"express\").Router();\r\nconst BlogController=require(\"../controllers/BlogController\");\r\nconst verifyToken =require(\"../middlewares/verifyToken\");\r\nconst isAdmin=require(\"../middlewares/isAdmin\");\r\nconst upload=require(\"../utils/multer\")\r\nrouter.post(\"/\",verifyToken,isAdmin,upload.single(\"image\"),BlogController.AddBlog);\r\nrouter.delete(\"/:id\",verifyToken,isAdmin,BlogController.deletBlog);\r\nrouter.get(\"/\",BlogController.findData);\r\nrouter.put(\"/:id\",verifyToken,isAdmin,upload.single(\"image\"),BlogController.updateBlog);\r\nrouter.get(\"/:id\",verifyToken,isAdmin,BlogController.FindById);\r\nmodule.exports =router;"],mappingsxC,MAAMC,cAAc,GAACF,OAAO,CAAC,+BAA+B,CAAC;AAC7D,MAAMG,WAAW,GAAEH,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAMI,OAAO,GAACJ,OAAO,CAAC,wBAAwB,CAAC;AAC/C,MAAMK,MAAM,GAACL,OAAO,CAAC,iBAAiB,CAAC;AACvCD,MAAM,CAACO,IAAI,CAAC,GAAG,EAACH,WAAW,EAACC,OAAO,EAACC,MAAM,CAACE,MAAM,CAAC,OAAO,CAAC,EAACL,cAAc,CAACM,OAAO,CAAC;AAClFT,MAAM,CAACU,MAAM,CAAC,MAAM,EAACN,WAAW,EAACC,OAAO,EAACF,cAAc,CAACQ,SAAS,CAAC;AAClEX,MAAM,CAACY,GAAG,CAAC,GAAG,EAACT,cAAc,CAACU,QAAQ,CAAC;AACvCb,MAAM,CAACc,GAAG,CAAC,MAAM,EAACV,WAAW,EAACC,OAAO,EAACC,MAAM,CAACE,MAAM,CAAC,OAAO,CAAC,EAACL,cAAc,CAACY,UAAU,CAAC;AACvFf,MAAM,CAACY,GAAG,CAAC,MAAM,EAACR,WAAW,EAACC,OAAO,EAACF,cAAc,CAACa,QAAQ,CAAC;AAC9DC,MAAM,CAACC,OAAO,GAAElB,MAAM"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"446144f2025865bc1c0c1cf2c4a1078a4ee20f08"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2p7gdqvzu5=function(){return actualCoverage;};}return actualCoverage;}cov_2p7gdqvzu5();/**
 * @swagger
 * components:
 *   schemas:
 *     Book:
 *       type: object
 *       required:
 *         - title
 *         - author
 *         - finished
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the book
 *         title:
 *           type: string
 *           description: The title of your book
 *         author:
 *           type: string
 *           description: The book author
 *         finished:
 *           type: boolean
 *           description: Whether you have finished reading the book
 *         createdAt:
 *           type: string
 *           format: date
 *           description: The date the book was added
 *       example:
 *         id: d5fE_asz
 *         title: The New Turing Omnibus
 *         author: Alexander K. Dewdney
 *         finished: false
 *         createdAt: 2020-03-10T04:05:06.157Z
 */ /**
 * @swagger
 * tags:
 *   name: Blogs
 *   description: This is the blogs APiI
 * /blog:
 *   get:
 *     summary: Get all Blogs 
 *     tags: [Blogs]
 *     responses:
 *       200:
 *         description: Blogs Have been Fetched.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties: 
 *                 status:
 *                   type: integer
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *       500:
 *         description: Some server error
 *   post:
 *     summary: Add BLogsr 
 *     tags: [Blogs]
 *     parameters:
 *       - name: token
 *         in: header
 *         description: THis is the token to login
 *         type: string
 *         required: true
 *     requestBody:
 *       required: true
 *       content: 
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required:
 *               - title
 *               - content
 *               - image
 *             properties:
 *               title:
 *                 type: string
 *               content:
 *                 type: string
 *               image:
 *                 type: string
 *                 format: binary
 *     responses:
 *       200:
 *         description: Blog Created Successfully.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties: 
 *                 status:
 *                  type: integer
 *                 message:
 *                  type: string
 *                 data:
 *                  type: object
 *       500:
 *         description: Some server error
 * /blog/{id}:
 *   delete:
 *     summary: delete blog
 *     parameters :
 *       - name: token
 *         in: header
 *         description: token to log in
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description : object id of blog
 *     tags: [Blogs]
 *     responses:
 *       200:
 *         description: Blog deleted
 *         content:
 *           application/json:
 *             schema:
 *               type:  object
 *             properties:
 *               status:
 *                 type: integer
 *               message:
 *                 type: string
 *               data:
 *                 type: object
 *       404:
 *         description: Blog Not Found
 *         content:
 *           application/json:
 *             schema:
 *               type:  object
 *   put:
 *     summary: Update a blog 
 *     tags: [Blogs]
 *     parameters :
 *       - name: token
 *         in: header
 *         description: token to log in
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description : id of blog
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               title:
 *                 type: string
 *               image:
 *                 type: string
 *                 format: binary
 *               content:
 *                 type: string
 *     responses:
 *       201:
 *         description: Blog Created 
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: integer
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *       406:
 *         description: A field is Empty
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *   get:
 *     summary: single blog
 *     parameters :
 *       - name: token
 *         in: header
 *         description: token to log in
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description : id of blog
 *     tags: [Blogs]
 *     responses:
 *       200:
 *         description: Single Blog Retrieved
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *       404:
 *         description: Single Blog Not Found
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 */const router=(cov_2p7gdqvzu5().s[0]++,require("express").Router());const BlogController=(cov_2p7gdqvzu5().s[1]++,require("../controllers/BlogController"));const verifyToken=(cov_2p7gdqvzu5().s[2]++,require("../middlewares/verifyToken"));const isAdmin=(cov_2p7gdqvzu5().s[3]++,require("../middlewares/isAdmin"));const upload=(cov_2p7gdqvzu5().s[4]++,require("../utils/multer"));cov_2p7gdqvzu5().s[5]++;router.post("/",verifyToken,isAdmin,upload.single("image"),BlogController.AddBlog);cov_2p7gdqvzu5().s[6]++;router.delete("/:id",verifyToken,isAdmin,BlogController.deletBlog);cov_2p7gdqvzu5().s[7]++;router.get("/",BlogController.findData);cov_2p7gdqvzu5().s[8]++;router.put("/:id",verifyToken,isAdmin,upload.single("image"),BlogController.updateBlog);cov_2p7gdqvzu5().s[9]++;router.get("/:id",verifyToken,isAdmin,BlogController.FindById);cov_2p7gdqvzu5().s[10]++;module.exports=router;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6InErVEFlQTtBQUFBLDJGQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBakNBLENBa0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNQSxPQUFNLDBCQUFDQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUNDLE1BQU0sRUFBRSxFQUN4QyxLQUFNQyxlQUFjLDBCQUFDRixPQUFPLENBQUMsK0JBQStCLENBQUMsRUFDN0QsS0FBTUcsWUFBVywwQkFBRUgsT0FBTyxDQUFDLDRCQUE0QixDQUFDLEVBQ3hELEtBQU1JLFFBQU8sMEJBQUNKLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxFQUMvQyxLQUFNSyxPQUFNLDBCQUFDTCxPQUFPLENBQUMsaUJBQWlCLENBQUMsMEJBQ3ZDRCxNQUFNLENBQUNPLElBQUksQ0FBQyxHQUFHLENBQUNILFdBQVcsQ0FBQ0MsT0FBTyxDQUFDQyxNQUFNLENBQUNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQ0wsY0FBYyxDQUFDTSxPQUFPLENBQUMseUJBQ2xGVCxNQUFNLENBQUNVLE1BQU0sQ0FBQyxNQUFNLENBQUNOLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDRixjQUFjLENBQUNRLFNBQVMsQ0FBQyx5QkFDbEVYLE1BQU0sQ0FBQ1ksR0FBRyxDQUFDLEdBQUcsQ0FBQ1QsY0FBYyxDQUFDVSxRQUFRLENBQUMseUJBQ3ZDYixNQUFNLENBQUNjLEdBQUcsQ0FBQyxNQUFNLENBQUNWLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDQyxNQUFNLENBQUNFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQ0wsY0FBYyxDQUFDWSxVQUFVLENBQUMseUJBQ3ZGZixNQUFNLENBQUNZLEdBQUcsQ0FBQyxNQUFNLENBQUNSLFdBQVcsQ0FBQ0MsT0FBTyxDQUFDRixjQUFjLENBQUNhLFFBQVEsQ0FBQywwQkFDOURDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFFbEIsTUFBTSIsIm5hbWVzIjpbInJvdXRlciIsInJlcXVpcmUiLCJSb3V0ZXIiLCJCbG9nQ29udHJvbGxlciIsInZlcmlmeVRva2VuIiwiaXNBZG1pbiIsInVwbG9hZCIsInBvc3QiLCJzaW5nbGUiLCJBZGRCbG9nIiwiZGVsZXRlIiwiZGVsZXRCbG9nIiwiZ2V0IiwiZmluZERhdGEiLCJwdXQiLCJ1cGRhdGVCbG9nIiwiRmluZEJ5SWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiJFOlxcYW5kZWxhXFxOZXcgQW5kZWxhXFxNWSBCUkFORFxcU0VSVkVSXFxzcmNcXHJvdXRlcnNcXCIsInNvdXJjZXMiOlsiYmxvZy5yb3V0ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAc3dhZ2dlclxyXG4gKiBjb21wb25lbnRzOlxyXG4gKiAgIHNjaGVtYXM6XHJcbiAqICAgICBCb29rOlxyXG4gKiAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgcmVxdWlyZWQ6XHJcbiAqICAgICAgICAgLSB0aXRsZVxyXG4gKiAgICAgICAgIC0gYXV0aG9yXHJcbiAqICAgICAgICAgLSBmaW5pc2hlZFxyXG4gKiAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgIGlkOlxyXG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGF1dG8tZ2VuZXJhdGVkIGlkIG9mIHRoZSBib29rXHJcbiAqICAgICAgICAgdGl0bGU6XHJcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgdGl0bGUgb2YgeW91ciBib29rXHJcbiAqICAgICAgICAgYXV0aG9yOlxyXG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGJvb2sgYXV0aG9yXHJcbiAqICAgICAgICAgZmluaXNoZWQ6XHJcbiAqICAgICAgICAgICB0eXBlOiBib29sZWFuXHJcbiAqICAgICAgICAgICBkZXNjcmlwdGlvbjogV2hldGhlciB5b3UgaGF2ZSBmaW5pc2hlZCByZWFkaW5nIHRoZSBib29rXHJcbiAqICAgICAgICAgY3JlYXRlZEF0OlxyXG4gKiAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICBmb3JtYXQ6IGRhdGVcclxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgZGF0ZSB0aGUgYm9vayB3YXMgYWRkZWRcclxuICogICAgICAgZXhhbXBsZTpcclxuICogICAgICAgICBpZDogZDVmRV9hc3pcclxuICogICAgICAgICB0aXRsZTogVGhlIE5ldyBUdXJpbmcgT21uaWJ1c1xyXG4gKiAgICAgICAgIGF1dGhvcjogQWxleGFuZGVyIEsuIERld2RuZXlcclxuICogICAgICAgICBmaW5pc2hlZDogZmFsc2VcclxuICogICAgICAgICBjcmVhdGVkQXQ6IDIwMjAtMDMtMTBUMDQ6MDU6MDYuMTU3WlxyXG4gKi9cclxuLyoqXHJcbiAqIEBzd2FnZ2VyXHJcbiAqIHRhZ3M6XHJcbiAqICAgbmFtZTogQmxvZ3NcclxuICogICBkZXNjcmlwdGlvbjogVGhpcyBpcyB0aGUgYmxvZ3MgQVBpSVxyXG4gKiAvYmxvZzpcclxuICogICBnZXQ6XHJcbiAqICAgICBzdW1tYXJ5OiBHZXQgYWxsIEJsb2dzIFxyXG4gKiAgICAgdGFnczogW0Jsb2dzXVxyXG4gKiAgICAgcmVzcG9uc2VzOlxyXG4gKiAgICAgICAyMDA6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IEJsb2dzIEhhdmUgYmVlbiBGZXRjaGVkLlxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgcHJvcGVydGllczogXHJcbiAqICAgICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXJcclxuICogICAgICAgICAgICAgICAgIG1lc3NhZ2U6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgZGF0YTpcclxuICogICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgIDUwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogU29tZSBzZXJ2ZXIgZXJyb3JcclxuICogICBwb3N0OlxyXG4gKiAgICAgc3VtbWFyeTogQWRkIEJMb2dzciBcclxuICogICAgIHRhZ3M6IFtCbG9nc11cclxuICogICAgIHBhcmFtZXRlcnM6XHJcbiAqICAgICAgIC0gbmFtZTogdG9rZW5cclxuICogICAgICAgICBpbjogaGVhZGVyXHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IFRIaXMgaXMgdGhlIHRva2VuIHRvIGxvZ2luXHJcbiAqICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICogICAgIHJlcXVlc3RCb2R5OlxyXG4gKiAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gKiAgICAgICBjb250ZW50OiBcclxuICogICAgICAgICBtdWx0aXBhcnQvZm9ybS1kYXRhOlxyXG4gKiAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgcmVxdWlyZWQ6XHJcbiAqICAgICAgICAgICAgICAgLSB0aXRsZVxyXG4gKiAgICAgICAgICAgICAgIC0gY29udGVudFxyXG4gKiAgICAgICAgICAgICAgIC0gaW1hZ2VcclxuICogICAgICAgICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICAgICAgICB0aXRsZTpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICBpbWFnZTpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgICAgZm9ybWF0OiBiaW5hcnlcclxuICogICAgIHJlc3BvbnNlczpcclxuICogICAgICAgMjAwOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBCbG9nIENyZWF0ZWQgU3VjY2Vzc2Z1bGx5LlxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgICAgICAgICAgcHJvcGVydGllczogXHJcbiAqICAgICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlclxyXG4gKiAgICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgIGRhdGE6XHJcbiAqICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0XHJcbiAqICAgICAgIDUwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogU29tZSBzZXJ2ZXIgZXJyb3JcclxuICogL2Jsb2cve2lkfTpcclxuICogICBkZWxldGU6XHJcbiAqICAgICBzdW1tYXJ5OiBkZWxldGUgYmxvZ1xyXG4gKiAgICAgcGFyYW1ldGVycyA6XHJcbiAqICAgICAgIC0gbmFtZTogdG9rZW5cclxuICogICAgICAgICBpbjogaGVhZGVyXHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IHRva2VuIHRvIGxvZyBpblxyXG4gKiAgICAgICAtIGluOiBwYXRoXHJcbiAqICAgICAgICAgbmFtZTogaWRcclxuICogICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uIDogb2JqZWN0IGlkIG9mIGJsb2dcclxuICogICAgIHRhZ3M6IFtCbG9nc11cclxuICogICAgIHJlc3BvbnNlczpcclxuICogICAgICAgMjAwOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBCbG9nIGRlbGV0ZWRcclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6ICBvYmplY3RcclxuICogICAgICAgICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICAgICAgICBzdGF0dXM6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyXHJcbiAqICAgICAgICAgICAgICAgbWVzc2FnZTpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgIGRhdGE6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgNDA0OlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBCbG9nIE5vdCBGb3VuZFxyXG4gKiAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICBhcHBsaWNhdGlvbi9qc29uOlxyXG4gKiAgICAgICAgICAgICBzY2hlbWE6XHJcbiAqICAgICAgICAgICAgICAgdHlwZTogIG9iamVjdFxyXG4gKiAgIHB1dDpcclxuICogICAgIHN1bW1hcnk6IFVwZGF0ZSBhIGJsb2cgXHJcbiAqICAgICB0YWdzOiBbQmxvZ3NdXHJcbiAqICAgICBwYXJhbWV0ZXJzIDpcclxuICogICAgICAgLSBuYW1lOiB0b2tlblxyXG4gKiAgICAgICAgIGluOiBoZWFkZXJcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogdG9rZW4gdG8gbG9nIGluXHJcbiAqICAgICAgIC0gaW46IHBhdGhcclxuICogICAgICAgICBuYW1lOiBpZFxyXG4gKiAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgIHJlcXVpcmVkOiB0cnVlXHJcbiAqICAgICAgICAgZGVzY3JpcHRpb24gOiBpZCBvZiBibG9nXHJcbiAqICAgICByZXF1ZXN0Qm9keTpcclxuICogICAgICAgcmVxdWlyZWQ6IHRydWVcclxuICogICAgICAgY29udGVudDpcclxuICogICAgICAgICBtdWx0aXBhcnQvZm9ybS1kYXRhOlxyXG4gKiAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgcHJvcGVydGllczpcclxuICogICAgICAgICAgICAgICB0aXRsZTpcclxuICogICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgICAgICAgIGltYWdlOlxyXG4gKiAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nXHJcbiAqICAgICAgICAgICAgICAgICBmb3JtYXQ6IGJpbmFyeVxyXG4gKiAgICAgICAgICAgICAgIGNvbnRlbnQ6XHJcbiAqICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgIHJlc3BvbnNlczpcclxuICogICAgICAgMjAxOlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBCbG9nIENyZWF0ZWQgXHJcbiAqICAgICAgICAgY29udGVudDpcclxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgICAgICAgICBwcm9wZXJ0aWVzOlxyXG4gKiAgICAgICAgICAgICAgICAgc3RhdHVzOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyXHJcbiAqICAgICAgICAgICAgICAgICBtZXNzYWdlOlxyXG4gKiAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmdcclxuICogICAgICAgICAgICAgICAgIGRhdGE6XHJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgICAgICA0MDY6XHJcbiAqICAgICAgICAgZGVzY3JpcHRpb246IEEgZmllbGQgaXMgRW1wdHlcclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKiAgIGdldDpcclxuICogICAgIHN1bW1hcnk6IHNpbmdsZSBibG9nXHJcbiAqICAgICBwYXJhbWV0ZXJzIDpcclxuICogICAgICAgLSBuYW1lOiB0b2tlblxyXG4gKiAgICAgICAgIGluOiBoZWFkZXJcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogdG9rZW4gdG8gbG9nIGluXHJcbiAqICAgICAgIC0gaW46IHBhdGhcclxuICogICAgICAgICBuYW1lOiBpZFxyXG4gKiAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgIHR5cGU6IHN0cmluZ1xyXG4gKiAgICAgICAgIHJlcXVpcmVkOiB0cnVlXHJcbiAqICAgICAgICAgZGVzY3JpcHRpb24gOiBpZCBvZiBibG9nXHJcbiAqICAgICB0YWdzOiBbQmxvZ3NdXHJcbiAqICAgICByZXNwb25zZXM6XHJcbiAqICAgICAgIDIwMDpcclxuICogICAgICAgICBkZXNjcmlwdGlvbjogU2luZ2xlIEJsb2cgUmV0cmlldmVkXHJcbiAqICAgICAgICAgY29udGVudDpcclxuICogICAgICAgICAgIGFwcGxpY2F0aW9uL2pzb246XHJcbiAqICAgICAgICAgICAgIHNjaGVtYTpcclxuICogICAgICAgICAgICAgICB0eXBlOiBvYmplY3RcclxuICogICAgICAgNDA0OlxyXG4gKiAgICAgICAgIGRlc2NyaXB0aW9uOiBTaW5nbGUgQmxvZyBOb3QgRm91bmRcclxuICogICAgICAgICBjb250ZW50OlxyXG4gKiAgICAgICAgICAgYXBwbGljYXRpb24vanNvbjpcclxuICogICAgICAgICAgICAgc2NoZW1hOlxyXG4gKiAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdFxyXG4gKi9cclxuY29uc3Qgcm91dGVyPXJlcXVpcmUoXCJleHByZXNzXCIpLlJvdXRlcigpO1xyXG5jb25zdCBCbG9nQ29udHJvbGxlcj1yZXF1aXJlKFwiLi4vY29udHJvbGxlcnMvQmxvZ0NvbnRyb2xsZXJcIik7XHJcbmNvbnN0IHZlcmlmeVRva2VuID1yZXF1aXJlKFwiLi4vbWlkZGxld2FyZXMvdmVyaWZ5VG9rZW5cIik7XHJcbmNvbnN0IGlzQWRtaW49cmVxdWlyZShcIi4uL21pZGRsZXdhcmVzL2lzQWRtaW5cIik7XHJcbmNvbnN0IHVwbG9hZD1yZXF1aXJlKFwiLi4vdXRpbHMvbXVsdGVyXCIpXHJcbnJvdXRlci5wb3N0KFwiL1wiLHZlcmlmeVRva2VuLGlzQWRtaW4sdXBsb2FkLnNpbmdsZShcImltYWdlXCIpLEJsb2dDb250cm9sbGVyLkFkZEJsb2cpO1xyXG5yb3V0ZXIuZGVsZXRlKFwiLzppZFwiLHZlcmlmeVRva2VuLGlzQWRtaW4sQmxvZ0NvbnRyb2xsZXIuZGVsZXRCbG9nKTtcclxucm91dGVyLmdldChcIi9cIixCbG9nQ29udHJvbGxlci5maW5kRGF0YSk7XHJcbnJvdXRlci5wdXQoXCIvOmlkXCIsdmVyaWZ5VG9rZW4saXNBZG1pbix1cGxvYWQuc2luZ2xlKFwiaW1hZ2VcIiksQmxvZ0NvbnRyb2xsZXIudXBkYXRlQmxvZyk7XHJcbnJvdXRlci5nZXQoXCIvOmlkXCIsdmVyaWZ5VG9rZW4saXNBZG1pbixCbG9nQ29udHJvbGxlci5GaW5kQnlJZCk7XHJcbm1vZHVsZS5leHBvcnRzID1yb3V0ZXI7Il19